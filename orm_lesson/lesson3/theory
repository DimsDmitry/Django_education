#3. Маршрутизация, обработка исключений запросов, перенаправления | Django уроки


urlpatterns = [
    path('', index),           #http://127.0.0.1:8000/
    path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
]

Шаблон маршрута, позволяющий указать число после категории. В views вносим изменения:

def categories(request, catid):
    return HttpResponse(f'<h1> Статьи по категориям </h1> <p>{catid}</p>')

Добавляя аргумент catid

Типы:
str - любая не пустая строка, кроме символа '/'
int - любое пол. число включая 0
slug - слаг, латиника ASCII таблицы, символы дефиса и подчёркивания
uuid - цифры, маленькие латинские символы ASCII, дефис
path - любая не пустая строка, включая '/'


re_path()

urlpatterns = [
    path('', index),           #http://127.0.0.1:8000/
    path('cats/<int:catid>/', categories), #http://127.0.0.1:8000/cats/1/
    re_path(r'^archive/(?P<year>[0-9]{4})/', archive),
]

r'^archive/(?P<year>[0-9]{4})/' - число с элементами от 0 до 9, обязательно 4 цифры! Иначе ошибка.


def categories(request, ... request - параметр для определения запроса. Через него можно обратиться к словарю
request.GET, в котором сохраняются все параметры, присутствующие в GET-запросах.

DEBUG = True - режим отладки включен
Если DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1'] должно быть указано

(переход в боевой режим, отладочная информация не будет отображаться)
