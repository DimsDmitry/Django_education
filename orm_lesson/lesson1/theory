MTV - Models, Templates, Views (Модели, Шаблоны, Представления) - паттерн

Разработчики фреймворка решили, что каждая самостоятельная часть сайта -
отдельное приложение.

Отдельно пишется приложение для отображения страницы сайта по опр. запросу

Потом например ещё приложение для форума, для опроса пользователей и т.д.
Каждая часть сайта - отдельное приложение!

python3 manage.py startapp women
создаём приложение women, в нём содержатся файлы:

__init__ - говорит о том, что каталог - отдельное приложение, пакет.
папака migrations - хранение миграций баз данных приложения
admin - связь приложения с админ-панелью сайта (поставляется с Джанго)
apps - для настройки текущего приложения
models - для хранения ORM-моделей, представления данных из БД
tests - модуль для тестов
views - для хранения представлений (контроллеров) текущего приложения

В settings, INSTALLED_APPS дописываем своё приложение 'women' к уже существующим.
Django, видя это приложение, обращается к women/apps.py, классу WomenConfig
Чтобы не приходилось конкретизировать этот путь, можно сразу его прописать
в INSTALLED_APPS:

'women.apps.WomenConfig'

Приложение создано и зарегистрировано!

Создадим обработчик главной страницы сайта. Нужно определить представление
этой страницы. Его можно реализовать в виде функции или класса.
Воспользуемся функцией для более простого понимания.
views.py:
пропишем функцию представления: (имя любое)

def index(request):
    return HttpResponce('Страница приложения women.')


класс request содержит всю информацию о запросах

на выходе функция формирует экземпляр класса HttpResponce
Содержимое главной страницы - строка в ()

Теперь связываем функцию с url-адресом (urls.py)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('women/', index)
]

На запрос активизируется функция представления index, и мы видим строчку
http://127.0.0.1:8000/women/

Создадим другую страничку, аналогично прописав её маршрут
Главная страница http://127.0.0.1:8000 тогда перестанет работать!
Чтобы прописать к ней маршрут, нужно указать пустую строку:

path('', categories),

С какой-либо функцией представления. Она будет реагировать на главную страницу сайта.

Если потребуется вынести страницу в отдельное приложение, придётся копировать urlpattern
Поэтому можно вместо ф-ии представления передавать список url-адресов приложения и связанные
с ним функции. Это делается с пом. ф-и include

Было:     path('women/', index),
          path('cats/', categories),

Стало:
          path('women/', include('women.urls')),

Создадим файл urls в women!

http://127.0.0.1:8000/women/ - префикс появится, потому что мы указывали его ещё в coolsite/urls.py
Далее он будет добавляться автоматически
если добавить в него ещё маршрут:

urlpatterns = [
    path('', index),           #http://127.0.0.1:8000/women/
    path('cats/', categories), #http://127.0.0.1:8000/women/categories

]